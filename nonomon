#! /bin/zsh

#TODO: also define $1 and $2 as short versions of file and file_without_extension
# show usage if less than two args were provided
if [[ $# -lt 2 ]]; then
  echo "\n \
  Usage: nonomon <command> <fileglob>\n \
\n \
    * command: The shell command you want to execute when\n\
      the target file(s) change. Two shell variables are\n\
      set before the command is executed:\n\
        \n\
        * file: The name of the file which was modified.\n\
\n\
        * file_without_extension: The name of the file which\n\
          was modified, without it's file extension.\n\

      Note that you must escape the command string to prevent\n\
      it from being interpreted before nonomon receives the\n\
      argument.\n\
\n\
    * file glob: The file glob which specifies which files\n\
      to monitor\n\
\n\
    Examples:\n\
\n\
      # start server.js when any javascript file changes\n\
      nonomon \"node server.js\" **/*.js\n\
\n\
      # echo the name of any file in the current directory\n\
      # that changes\n\
      nonomon \"echo File Changed: \\$file\" *  
\n\
      # when any c file changes, compile it to a file with\n\
      # an \"o\" extension and execute the output file.\n\
      nonomon \"gcc -g \\\$file -o \\\$file_without_extension.o && ./\\\$file_without_extension.o\" *.c\n\
"
  exit 1
fi

#TODO: we need to do one execution as soon as we start
TMPFILE="/tmp/$(basename $0).$$.tmp"
COMMAND=$1
shift
TARGETS=$@

# echo "The target is:\n $TARGETS"
# echo "The command is: $COMMAND"
# echo "The tmp file is: $TMPFILE"

while true;
do
  echo ">> Watching <<"
  inotifywait -r -e close_write -e move_self \
    --fromfile =(echo $TARGETS | sed 's/ /\n/g') > $TMPFILE 2>&1

  #TODO: if a process is still running, we need to stop it.
  echo ">> Executing <<\n"
  
  #TODO right now it looks like we only get one file name
  CHANGED_FILES=$(grep -Po '.*(?= MOVE_SELF| CLOSE_WRITE)' $TMPFILE \
    | sed 's/\n/ /g')

  # we assume there is only one file, otherwise this would
  # need to be iterative
  FILE_WITHOUT_EXTENSION="${CHANGED_FILES%.*}"

  eval "file=$CHANGED_FILES;file_without_extension=$FILE_WITHOUT_EXTENSION; $COMMAND"
  echo "\n>> Executed"
done
